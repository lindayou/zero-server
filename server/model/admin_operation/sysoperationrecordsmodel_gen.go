// Code generated by goctl. DO NOT EDIT.

package admin_operation

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysOperationRecordsFieldNames          = builder.RawFieldNames(&SysOperationRecords{})
	sysOperationRecordsRows                = strings.Join(sysOperationRecordsFieldNames, ",")
	sysOperationRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(sysOperationRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysOperationRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(sysOperationRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysOperationRecordsModel interface {
		Insert(ctx context.Context, data *SysOperationRecords) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysOperationRecords, error)
		Update(ctx context.Context, data *SysOperationRecords) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysOperationRecordsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysOperationRecords struct {
		Id           int64        `db:"id"`
		CreatedAt    time.Time    `db:"created_at" format:"2006-01-02 15:04:05" json:"createdAt"`
		UpdatedAt    time.Time    `db:"updated_at" format:"2006-01-02 15:04:05" json:"updatedAt"`
		DeletedAt    sql.NullTime `db:"deleted_at"`
		Ip           string       `db:"ip"`            // 请求ip
		Method       string       `db:"method"`        // 请求方法
		Path         string       `db:"path"`          // 请求路径
		Status       int64        `db:"status"`        // 请求状态
		Latency      int64        `db:"latency"`       // 延迟
		Agent        string       `db:"agent"`         // 代理
		ErrorMessage string       `db:"error_message"` // 错误信息
		Body         string       `db:"body"`          // 请求Body
		Resp         string       `db:"resp"`          // 响应Body
		UserId       int64        `db:"user_id"`       // 用户id
	}
)

func newSysOperationRecordsModel(conn sqlx.SqlConn) *defaultSysOperationRecordsModel {
	return &defaultSysOperationRecordsModel{
		conn:  conn,
		table: "`sys_operation_records`",
	}
}

func (m *defaultSysOperationRecordsModel) withSession(session sqlx.Session) *defaultSysOperationRecordsModel {
	return &defaultSysOperationRecordsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`sys_operation_records`",
	}
}

func (m *defaultSysOperationRecordsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysOperationRecordsModel) FindOne(ctx context.Context, id int64) (*SysOperationRecords, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysOperationRecordsRows, m.table)
	var resp SysOperationRecords
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysOperationRecordsModel) Insert(ctx context.Context, data *SysOperationRecords) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysOperationRecordsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Ip, data.Method, data.Path, data.Status, data.Latency, data.Agent, data.ErrorMessage, data.Body, data.Resp, data.UserId)
	return ret, err
}

func (m *defaultSysOperationRecordsModel) Update(ctx context.Context, data *SysOperationRecords) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysOperationRecordsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Ip, data.Method, data.Path, data.Status, data.Latency, data.Agent, data.ErrorMessage, data.Body, data.Resp, data.UserId, data.Id)
	return err
}

func (m *defaultSysOperationRecordsModel) tableName() string {
	return m.table
}
