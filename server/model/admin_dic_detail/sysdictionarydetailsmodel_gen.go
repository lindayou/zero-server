// Code generated by goctl. DO NOT EDIT.

package admin_dic_detail

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysDictionaryDetailsFieldNames          = builder.RawFieldNames(&SysDictionaryDetails{})
	sysDictionaryDetailsRows                = strings.Join(sysDictionaryDetailsFieldNames, ",")
	sysDictionaryDetailsRowsExpectAutoSet   = strings.Join(stringx.Remove(sysDictionaryDetailsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysDictionaryDetailsRowsWithPlaceHolder = strings.Join(stringx.Remove(sysDictionaryDetailsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysDictionaryDetailsModel interface {
		Insert(ctx context.Context, data *SysDictionaryDetails) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysDictionaryDetails, error)
		Update(ctx context.Context, data *SysDictionaryDetails) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysDictionaryDetailsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysDictionaryDetails struct {
		Id              int64     `db:"id"`
		CreatedAt       time.Time `db:"created_at"`        // 创建时间
		UpdatedAt       time.Time `db:"updated_at"`        // 更新时间
		Label           string    `db:"label"`             // 展示值
		Value           int64     `db:"value"`             // 字典值
		Status          int64     `db:"status"`            // 启用状态
		Sort            int64     `db:"sort"`              // 排序标记
		SysDictionaryId int64     `db:"sys_dictionary_id"` // 关联标记
	}
)

func newSysDictionaryDetailsModel(conn sqlx.SqlConn) *defaultSysDictionaryDetailsModel {
	return &defaultSysDictionaryDetailsModel{
		conn:  conn,
		table: "`sys_dictionary_details`",
	}
}

func (m *defaultSysDictionaryDetailsModel) withSession(session sqlx.Session) *defaultSysDictionaryDetailsModel {
	return &defaultSysDictionaryDetailsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`sys_dictionary_details`",
	}
}

func (m *defaultSysDictionaryDetailsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysDictionaryDetailsModel) FindOne(ctx context.Context, id int64) (*SysDictionaryDetails, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysDictionaryDetailsRows, m.table)
	var resp SysDictionaryDetails
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysDictionaryDetailsModel) Insert(ctx context.Context, data *SysDictionaryDetails) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, sysDictionaryDetailsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Label, data.Value, data.Status, data.Sort, data.SysDictionaryId)
	return ret, err
}

func (m *defaultSysDictionaryDetailsModel) Update(ctx context.Context, data *SysDictionaryDetails) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysDictionaryDetailsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Label, data.Value, data.Status, data.Sort, data.SysDictionaryId, data.Id)
	return err
}

func (m *defaultSysDictionaryDetailsModel) tableName() string {
	return m.table
}
