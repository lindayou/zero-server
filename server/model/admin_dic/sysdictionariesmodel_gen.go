// Code generated by goctl. DO NOT EDIT.

package admin_dic

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysDictionariesFieldNames          = builder.RawFieldNames(&SysDictionaries{})
	sysDictionariesRows                = strings.Join(sysDictionariesFieldNames, ",")
	sysDictionariesRowsExpectAutoSet   = strings.Join(stringx.Remove(sysDictionariesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysDictionariesRowsWithPlaceHolder = strings.Join(stringx.Remove(sysDictionariesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysDictionariesModel interface {
		Insert(ctx context.Context, data *SysDictionaries) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysDictionaries, error)
		Update(ctx context.Context, data *SysDictionaries) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysDictionariesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysDictionaries struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
		Name      string    `db:"name"`       // 字典名（中）
		Type      string    `db:"type"`       // 字典名（英）
		Status    int64     `db:"status"`     // 状态
		Desc      string    `db:"desc"`       // 描述
	}
)

func newSysDictionariesModel(conn sqlx.SqlConn) *defaultSysDictionariesModel {
	return &defaultSysDictionariesModel{
		conn:  conn,
		table: "`sys_dictionaries`",
	}
}

func (m *defaultSysDictionariesModel) withSession(session sqlx.Session) *defaultSysDictionariesModel {
	return &defaultSysDictionariesModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`sys_dictionaries`",
	}
}

func (m *defaultSysDictionariesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysDictionariesModel) FindOne(ctx context.Context, id int64) (*SysDictionaries, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysDictionariesRows, m.table)
	var resp SysDictionaries
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysDictionariesModel) Insert(ctx context.Context, data *SysDictionaries) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, sysDictionariesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.Status, data.Desc)
	return ret, err
}

func (m *defaultSysDictionariesModel) Update(ctx context.Context, data *SysDictionaries) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysDictionariesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.Status, data.Desc, data.Id)
	return err
}

func (m *defaultSysDictionariesModel) tableName() string {
	return m.table
}
