// Code generated by goctl. DO NOT EDIT.

package menu

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysBaseMenusFieldNames          = builder.RawFieldNames(&SysBaseMenus{})
	sysBaseMenusRows                = strings.Join(sysBaseMenusFieldNames, ",")
	sysBaseMenusRowsExpectAutoSet   = strings.Join(stringx.Remove(sysBaseMenusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysBaseMenusRowsWithPlaceHolder = strings.Join(stringx.Remove(sysBaseMenusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysBaseMenusModel interface {
		Insert(ctx context.Context, data *SysBaseMenus) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysBaseMenus, error)
		Update(ctx context.Context, data *SysBaseMenus) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysBaseMenusModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysBaseMenus struct {
		Id          int64     `db:"id"`
		CreatedAt   time.Time `db:"created_at"` // 创建时间
		UpdatedAt   time.Time `db:"updated_at"` // 更新时间
		MenuLevel   int64     `db:"menu_level"`
		ParentId    string    `db:"parent_id"`    // 父菜单ID
		Path        string    `db:"path"`         // 路由path
		Name        string    `db:"name"`         // 路由name
		Hidden      int64     `db:"hidden"`       // 是否在列表隐藏
		Component   string    `db:"component"`    // 对应前端文件路径
		Sort        int64     `db:"sort"`         // 排序标记
		ActiveName  string    `db:"active_name"`  // 附加属性
		KeepAlive   int64     `db:"keep_alive"`   // 附加属性
		DefaultMenu int64     `db:"default_menu"` // 附加属性
		Title       string    `db:"title"`        // 附加属性
		Icon        string    `db:"icon"`         // 附加属性
		CloseTab    int64     `db:"close_tab"`    // 附加属性
	}
)

func newSysBaseMenusModel(conn sqlx.SqlConn) *defaultSysBaseMenusModel {
	return &defaultSysBaseMenusModel{
		conn:  conn,
		table: "`sys_base_menus`",
	}
}

func (m *defaultSysBaseMenusModel) withSession(session sqlx.Session) *defaultSysBaseMenusModel {
	return &defaultSysBaseMenusModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`sys_base_menus`",
	}
}

func (m *defaultSysBaseMenusModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysBaseMenusModel) FindOne(ctx context.Context, id int64) (*SysBaseMenus, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysBaseMenusRows, m.table)
	var resp SysBaseMenus
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysBaseMenusModel) Insert(ctx context.Context, data *SysBaseMenus) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysBaseMenusRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MenuLevel, data.ParentId, data.Path, data.Name, data.Hidden, data.Component, data.Sort, data.ActiveName, data.KeepAlive, data.DefaultMenu, data.Title, data.Icon, data.CloseTab)
	return ret, err
}

func (m *defaultSysBaseMenusModel) Update(ctx context.Context, data *SysBaseMenus) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysBaseMenusRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MenuLevel, data.ParentId, data.Path, data.Name, data.Hidden, data.Component, data.Sort, data.ActiveName, data.KeepAlive, data.DefaultMenu, data.Title, data.Icon, data.CloseTab, data.Id)
	return err
}

func (m *defaultSysBaseMenusModel) tableName() string {
	return m.table
}
