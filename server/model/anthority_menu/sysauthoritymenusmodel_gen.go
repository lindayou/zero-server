// Code generated by goctl. DO NOT EDIT.

package anthority_menu

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysAuthorityMenusFieldNames          = builder.RawFieldNames(&SysAuthorityMenus{})
	sysAuthorityMenusRows                = strings.Join(sysAuthorityMenusFieldNames, ",")
	sysAuthorityMenusRowsExpectAutoSet   = strings.Join(stringx.Remove(sysAuthorityMenusFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysAuthorityMenusRowsWithPlaceHolder = strings.Join(stringx.Remove(sysAuthorityMenusFieldNames, "`sys_base_menu_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysAuthorityMenusModel interface {
		Insert(ctx context.Context, data *SysAuthorityMenus) (sql.Result, error)
		FindOne(ctx context.Context, sysBaseMenuId int64) (*SysAuthorityMenus, error)
		Update(ctx context.Context, data *SysAuthorityMenus) error
		Delete(ctx context.Context, sysBaseMenuId int64) error
	}

	defaultSysAuthorityMenusModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysAuthorityMenus struct {
		SysBaseMenuId           int64 `db:"sys_base_menu_id"`
		SysAuthorityAuthorityId int64 `db:"sys_authority_authority_id"` // 角色ID
	}
)

func newSysAuthorityMenusModel(conn sqlx.SqlConn) *defaultSysAuthorityMenusModel {
	return &defaultSysAuthorityMenusModel{
		conn:  conn,
		table: "`sys_authority_menus`",
	}
}

func (m *defaultSysAuthorityMenusModel) withSession(session sqlx.Session) *defaultSysAuthorityMenusModel {
	return &defaultSysAuthorityMenusModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`sys_authority_menus`",
	}
}

func (m *defaultSysAuthorityMenusModel) Delete(ctx context.Context, sysBaseMenuId int64) error {
	query := fmt.Sprintf("delete from %s where `sys_base_menu_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, sysBaseMenuId)
	return err
}

func (m *defaultSysAuthorityMenusModel) FindOne(ctx context.Context, sysBaseMenuId int64) (*SysAuthorityMenus, error) {
	query := fmt.Sprintf("select %s from %s where `sys_base_menu_id` = ? limit 1", sysAuthorityMenusRows, m.table)
	var resp SysAuthorityMenus
	err := m.conn.QueryRowCtx(ctx, &resp, query, sysBaseMenuId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysAuthorityMenusModel) Insert(ctx context.Context, data *SysAuthorityMenus) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, sysAuthorityMenusRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SysBaseMenuId, data.SysAuthorityAuthorityId)
	return ret, err
}

func (m *defaultSysAuthorityMenusModel) Update(ctx context.Context, data *SysAuthorityMenus) error {
	query := fmt.Sprintf("update %s set %s where `sys_base_menu_id` = ?", m.table, sysAuthorityMenusRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SysAuthorityAuthorityId, data.SysBaseMenuId)
	return err
}

func (m *defaultSysAuthorityMenusModel) tableName() string {
	return m.table
}
